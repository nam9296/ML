{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"titanic_rf","private_outputs":true,"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMkkaUUWHjtCuqBgrQ8x04x"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"UgdZY9k3-0_j"},"source":["from google.colab import drive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S1qVOK22Ag6j"},"source":["drive.mount(\"/content/gdrive/\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qmiJ394nApB_"},"source":["import pandas as pd\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4EDKsrpdA2rx"},"source":["path='/content/gdrive/MyDrive/Colab Notebooks/titanic/'\n","\n","train = pd.read_csv(path+\"train.csv\")\n","test = pd.read_csv(path+ \"test.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mlJS1iEmBHAo"},"source":["test.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kkKthK6BBiVi"},"source":["# 생존자 비율\n","train['Survived'].value_counts(normalize=True) \n","# normalize=True를 이용하면 비율로 출력됨"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d9zUumqZC_Sr"},"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nzpc3epRDVlr"},"source":["sns.countplot(train['Survived'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GHhrTXp8DXWC"},"source":["train['Pclass']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kFzfWETJDfDi"},"source":["train['Survived'].groupby(train['Pclass']).mean()\n","# Pclass 별 생존률 확인"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_hU03c8GDllQ"},"source":["sns.countplot(train['Pclass'], hue=train['Survived'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3zRi5_iUD5OY"},"source":["train['Name'].head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lVRv_bW1D7BS"},"source":["# 호칭별 인원수를 출력하고싶다.\n","train['Name_Title']=train['Name'].apply(lambda x:x.split(\",\")[1]).apply(lambda x:x.split()[0])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gkqXWGeFEMG3"},"source":["train['Name_Title'].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6by5y4dUFKpN"},"source":["train['Survived'].groupby(train['Name_Title']).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7mQr3OfCFNtd"},"source":["train['Name_Len'] = train['Name'].apply(lambda x: len(x))\n","train['Name_Len']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EEUmzx-2F3cb"},"source":["# 이름의 길이를 구간으로 나눈 다음, 구간별 생존률\n","train['Survived'].groupby(pd.qcut(train['Name_Len'],5)).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cXbsizzdGDgK"},"source":["train['Sex'].value_counts(normalize=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"750sp1a4GiwU"},"source":["train['Survived'].groupby(train['Sex']).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S1B0u9EOG4JW"},"source":["train['Survived'].groupby(train['Age'].isnull()).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WiCOKQOfGpDb"},"source":["train.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kQYn276hG6sP"},"source":["train['Survived'].groupby(pd.qcut(train['Age'],5)).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XYy3hJ16HRTj"},"source":["pd.qcut(train['Age'],5).value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G69SPGzBLXt6"},"source":["pd.qcut(train['Age'],5).value_counts(normalize=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Cza8w_dFLc7X"},"source":["train['Survived'].groupby(train['SibSp']).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6NAT_m0uLfcl"},"source":["train['SibSp'].value_counts()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T2X6E-s_LwLr"},"source":["train['Survived'].groupby(train['Parch']).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_8M_9oxKLyGZ"},"source":["train['Parch'].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7xX-g0LJLzgF"},"source":["train['Ticket'].head(n=10)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I5xBKmGrMCnp"},"source":["train['Ticket_Len'] = train['Ticket'].apply(lambda x: len(x))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mi_RHlF_MWeU"},"source":["train.groupby(['Ticket_Len'])['Survived'].mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p9SVA2fQMX6y"},"source":["train['Ticket_Len'].value_counts()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L-Uv7_ljM6Y-"},"source":["train['Ticket_Lett'] = train['Ticket'].apply(lambda x: str(x)[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3r6MkUpqM8Pc"},"source":["train['Ticket_Lett'].value_counts()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FMLDaNBtM9Pk"},"source":["train.groupby(['Ticket_Lett'])['Survived'].mean()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VtMNBHkANLaV"},"source":["pd.qcut(train['Fare'], 3).value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ou6lxrZpNVQo"},"source":["train['Survived'].groupby(pd.qcut(train['Fare'], 3)).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AcIm6cDJNhon"},"source":["pd.crosstab(pd.qcut(train['Fare'], 5), columns=train['Pclass'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T1PE28ikNi_s"},"source":["train['Cabin_Letter'] = train['Cabin'].apply(lambda x: str(x)[0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fqWtIG92N6S0"},"source":["train['Cabin_Letter'].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AVCBxpMNN7j4"},"source":["train['Survived'].groupby(train['Cabin_Letter']).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Nj5-1pj6OKLC"},"source":["train['Cabin_num']=train['Cabin'].apply(lambda x: str(x).split()[-1][1:])\n","train['Cabin_num'].replace(\"an\", np.NaN, inplace=True)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eIFb-pTTOeWc"},"source":["train['Cabin_num']\n","train['Cabin_num']=train['Cabin_num'].apply(lambda x: int(x) if not pd.isnull(x) and x !=\"\" else np.NaN)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pozcoTZBPjO-"},"source":["pd.qcut(train['Cabin_num'],3).value_counts()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s04HmJ45PzOB"},"source":["train['Survived'].groupby(pd.qcut(train['Cabin_num'], 3)).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zOQmVto4RcEc"},"source":["train['Survived'].corr(train['Cabin_num'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QDS0cXBERvX5"},"source":["train['Embarked'].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N6cGmmY8RxBO"},"source":["train['Embarked'].value_counts(normalize=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PYA_oQHuR0IZ"},"source":["train['Survived'].groupby(train['Embarked']).mean()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DUOUnnV9R1y7"},"source":["sns.countplot(train['Embarked'], hue=train['Pclass'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NQRR76meR9b6"},"source":["# feature engineering"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rxFxW9JWS6O4"},"source":["def names(train, test):\n","  for i in [train,test]:\n","    i['Name_Len']=i['Name'].apply(lambda x:len(x))\n","    i['Name_Title'] = i['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\n","    del i['Name']\n","  return train, test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FPI_ngrfTCPc"},"source":["path='/content/gdrive/MyDrive/Colab Notebooks/titanic/'\n","\n","train = pd.read_csv(path+\"train.csv\")\n","test = pd.read_csv(path+ \"test.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vz91N2XuTK9F"},"source":["train, test= names(train, test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vvBo01LqT5dz"},"source":["train"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-KxlQwbUJc-"},"source":["def age_impute(train,test):\n","  for i in [train,test]:\n","    i['Age_Null_Flag'] = i['Age'].apply(lambda x: 1 if pd.isnull(x) else 0)\n","  train['mean'] = train.groupby(['Name_Title', 'Pclass'])['Age'].transform('mean')\n","  train['Age'] = train['Age'].fillna(train['mean'])\n","  z = test.merge(train, on=['Name_Title', 'Pclass'], how='left').drop_duplicates(['PassengerId_x'])\n","  test['Age'] = np.where(test['Age'].isnull(), z['mean'], test['Age'])\n","  test['Age'] = test['Age'].fillna(test['Age'].mean())\n","  del train['mean']\n","\n","  return train, test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sXDVpbA5URBC"},"source":["train, test = age_impute(train,test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wkGnFx4ccZ3e"},"source":["train.info()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gMGr-kaicoTN"},"source":["def fam_size(train, test):\n","    for i in [train, test]:\n","        i['Fam_Size'] = np.where((i['SibSp']+i['Parch']) == 0 , 'Solo',\n","                           np.where((i['SibSp']+i['Parch']) <= 3,'Nuclear', 'Big'))\n","        del i['SibSp']\n","        del i['Parch']\n","    return train, test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MChsMa5ScoWA"},"source":["train, test = fam_size(train, test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5WWhHJvgcoYl"},"source":["def ticket_grouped(train, test):\n","    for i in [train, test]:\n","        i['Ticket_Len'] = i['Ticket'].apply(lambda x: len(x))\n","        del i['Ticket']\n","    return train, test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X0_e-6ywcobT"},"source":["train, test = ticket_grouped(train, test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E88tXqxEcoiK"},"source":["def cabin_num(train, test):\n","    for i in [train, test]:\n","        i['Cabin_num1'] = i['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])\n","        i['Cabin_num1'].replace('an', np.NaN, inplace = True)\n","        i['Cabin_num1'] = i['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)\n","        i['Cabin_num'] = pd.qcut(train['Cabin_num1'],3)\n","    train = pd.concat((train, pd.get_dummies(train['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n","    test = pd.concat((test, pd.get_dummies(test['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n","    del train['Cabin_num']\n","    del test['Cabin_num']\n","    del train['Cabin_num1']\n","    del test['Cabin_num1']\n","    return train, test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WfTa4_9HdTax"},"source":["train, test = cabin_num(train, test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P4NeN265cod2"},"source":["def cabin(train, test):\n","    for i in [train, test]:\n","        i['Cabin_Letter'] = i['Cabin'].apply(lambda x: str(x)[0])\n","        del i['Cabin']\n","    return train, test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wBxBXQ8NcogE"},"source":["train, test = cabin(train, test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QnDUi8awdTd7"},"source":["def embarked_impute(train, test):\n","    for i in [train, test]:\n","        i['Embarked'] = i['Embarked'].fillna('S')\n","    return train, test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mrZEbwMOgNaB"},"source":["train, test = embarked_impute(train, test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dmFwu96HgNdP"},"source":["def dummies(train, test, columns = ['Pclass', 'Sex', 'Embarked', 'Ticket_Lett', 'Cabin_Letter', 'Name_Title', 'Fam_Size']):\n","    for column in columns:\n","        train[column] = train[column].apply(lambda x: str(x))\n","        test[column] = test[column].apply(lambda x: str(x))\n","        good_cols = [column+'_'+i for i in train[column].unique() if i in test[column].unique()]\n","        train = pd.concat((train, pd.get_dummies(train[column], prefix = column)[good_cols]), axis = 1)\n","        test = pd.concat((test, pd.get_dummies(test[column], prefix = column)[good_cols]), axis = 1)\n","        del train[column]\n","        del test[column]\n","    return train, test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vu4exVxpgNfd"},"source":["train, test = dummies(train, test, columns = ['Pclass', 'Sex', 'Embarked', \n","                                              'Cabin_Letter', 'Name_Title', 'Fam_Size'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6yhKsfRLgg-q"},"source":["def drop(train, test, bye = ['PassengerId']):\n","    for i in [train, test]:\n","        for z in bye:\n","            del i[z]\n","    return train, test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Llhg9jCMghBM"},"source":["train, test = drop(train, test)\n","train"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"okfcHoNsghDf"},"source":["test.info()\n","test[\"Fare\"].fillna(train[\"Fare\"].mean(), inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XjCYtb2j-iEG"},"source":["#### 하이퍼 퍼러미터 튜닝"]},{"cell_type":"code","metadata":{"id":"xFXN9TFIghFv"},"source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OnPU6FKJghH6"},"source":["rf=RandomForestClassifier(max_features=\"auto\",\n","                       random_state=1,\n","                       oob_score=True,#out-of-bag: 트레이닝 과정에 사용되지 않은 데이터들로 평가를 하겠다.\n","                       n_jobs=-1)# 컴퓨터의 모든 cpu를 동원하겠다"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6vyomWpwghJ9"},"source":["## 안에 속성을 요소를 모두 짝지어서 다 모델을 만들어줌 아래에 경우 15번 모델을 만듬\n","param_grid={\n","    \"n_estimators\":[50,100,400,700,1000],\n","    \"max_depth\":[5,7,9]\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PFSwivzlghMI"},"source":["gs=GridSearchCV(estimator=rf,\n","             param_grid=param_grid,\n","             n_jobs=-1,\n","             cv=3)#cv:교차 검증시 분할되는 폴드의 수"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9ATr9MgVghPX"},"source":["gs.fit(train.iloc[:,1:],train.iloc[:,0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lb4aoqFZ-1co"},"source":["print(gs.best_params_) \n","print(gs.best_score_)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HSdLmjjO-1ak"},"source":["## 모델을 만든 결과 최고는ㄴ\n","# 'max_depth': 9, 'n_estimators': 100}\n","# print(gs.best_score_) 위 값에 모델에 점수"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L6f5KalM-1Ye"},"source":["#위에서 알아낸 최고의 결과가 나오는 옵션을 넣어서 모델 작성\n","rf=RandomForestClassifier(max_features=\"auto\",\n","                       random_state=1,\n","                       oob_score=True,#out-of-bag: 트레이닝 과정에 사용되지 않은 데이터들로 평가를 하겠다.\n","                       n_jobs=-1,\n","                       max_depth=9,\n","                       n_estimators=100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7IAw2DBS-1Wy"},"source":["rf.fit(train.iloc[:,1:],train.iloc[:,0])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y_iyqrd9-1TV"},"source":["predictions=rf.predict(test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"G6U_4Kbw-1RP"},"source":["predictions=pd.DataFrame(predictions,columns=[\"Survived\"])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ys2_koUD-1O1"},"source":["test=pd.read_csv(path+\"test.csv\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CWwcvDio-1Ds"},"source":["test\n","predictions=pd.concat((test.iloc[:,0],predictions),axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o418p5BX-87R"},"source":["predictions.to_csv(\"myprediction.csv\",index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qXsUX1irdTgQ"},"source":["music_df = pd.DataFrame({'music_id': [1, 2, 3, 4, 5], \n","                      'music_genre': ['rock', \n","                                      'disco', \n","                                      'pop', \n","                                      'rock', \n","                                      'pop']}\n","                      , columns = ['music_id', 'music_genre'])\n","music_df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NxFs5O7zdTiP"},"source":["music_dummy_mat = pd.get_dummies(music_df['music_genre'])\n","music_dummy_mat"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FboGgwvreMKy"},"source":["music_dummy_mat = music_df.join(music_dummy_mat.add_prefix('genre_'))\n","music_dummy_mat"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jCN5bVAueMO_"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F1OSzPSuUV-j"},"source":["# 그룹별 연산\n","# transform 함수 : 스칼라값, or 같은 크기를 갖는 배열이 리턴\n","# apply 함수 : 스칼라값이 리턴"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0jq3jtOfZ01m"},"source":["tips=sns.load_dataset(\"tips\")\n","tips"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1MYH4r8cZ6w2"},"source":["tips.groupby(\"day\").apply(np.mean)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LKTLiimGaH-D"},"source":["tips.groupby(\"day\").transform(np.mean)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xb7d_AR7aQgJ"},"source":[""],"execution_count":null,"outputs":[]}]}